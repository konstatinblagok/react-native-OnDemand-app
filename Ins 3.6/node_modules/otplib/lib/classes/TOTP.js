'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _OTPUtils = require('./OTPUtils');

var _OTPUtils2 = _interopRequireDefault(_OTPUtils);

var _HOTP2 = require('./HOTP');

var _HOTP3 = _interopRequireDefault(_HOTP2);

/**
 *
 * Time-based One-time Password Algorithm
 *
 * References
 * --------------------------
 * - http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm
 * - http://tools.ietf.org/html/rfc6238
 *
 *
 * Algorithm
 * --------------------------
 * ```
 *  T0 be an epoch
 *  TS be the time stemp
 *  TC be the current timestamp turned into an int, using defined T0, counting in TS units
 *  TC = (unixtime(now) - unixtime(T0)) / TS
 *  TOTP = HOTP(secretsecret, TC), where the HOTP algorithm is defined below.
 *  TOTP-Value = TOTP mod 10d, where d is the desired number of digits of the one-time password.
 * ```
 *
 * @class TOTP
 * @extends {HOTP}
 * @since 3.0.0
 * @author Gerald Yeo
 * @license MIT
 *
 */

var TOTP = (function (_HOTP) {
  _inherits(TOTP, _HOTP);

  /**
   * Creates the instance
   */

  function TOTP() {
    _classCallCheck(this, TOTP);

    _get(Object.getPrototypeOf(TOTP.prototype), 'constructor', this).call(this);

    /**
     * @type {number}
     */
    this.step = 30;

    /**
     * @type {number}
     */
    this.epoch = null;
  }

  /**
   * Option Setter
   *
   * @method options
   *
   * @param {Object} opt - custom options
   */

  _createClass(TOTP, [{
    key: 'options',
    value: function options() {
      var opt = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      _get(Object.getPrototypeOf(TOTP.prototype), 'options', this).call(this, opt);
      this.step = opt.step || this.step;
      this.epoch = opt.epoch || this.epoch;
    }

    /**
     * Generates the OTP code
     *
     * @method generate
     *
     * @param {string} secret - your secret that is used to generate the token
     * @return {number} OTP Code
     */
  }, {
    key: 'generate',
    value: function generate(secret) {
      var epoch = this.epoch || new Date().getTime();
      var timeStep = this.step;
      var timeCounter = Math.floor(epoch / (timeStep * 1000.0));

      var code = _get(Object.getPrototypeOf(TOTP.prototype), 'generate', this).call(this, secret, timeCounter);

      return code;
    }

    /**
     * Checks the provided OTP token against system generated token
     *
     * @method check
     *
     * @param {string} token - the OTP token to check
     * @param {string} secret - your secret that is used to generate the token
     * @return {boolean}
     */
  }, {
    key: 'check',
    value: function check(token, secret) {
      var systemToken = this.generate(secret);
      return _OTPUtils2['default'].isSameToken(token, systemToken);
    }
  }]);

  return TOTP;
})(_HOTP3['default']);

exports['default'] = TOTP;
module.exports = exports['default'];