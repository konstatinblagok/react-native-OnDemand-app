'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x8, _x9, _x10) { var _again = true; _function: while (_again) { var object = _x8, property = _x9, receiver = _x10; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x8 = parent; _x9 = property; _x10 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _thirtyTwo = require('thirty-two');

var _thirtyTwo2 = _interopRequireDefault(_thirtyTwo);

var _OTPUtils = require('./OTPUtils');

var _OTPUtils2 = _interopRequireDefault(_OTPUtils);

var _TOTP2 = require('./TOTP');

var _TOTP3 = _interopRequireDefault(_TOTP2);

/**
 *
 * Google Authenticator adapter
 *
 * References
 * --------------------------
 * - http://en.wikipedia.org/wiki/Google_Authenticator
 *
 * Algorithm
 * --------------------------
 * ```
 *  secret := base32decode(secret)
 *  message := floor(current Unix time / 30)
 *  hash := HMAC-SHA1(secret, message)
 *  offset := last nibble of hash
 *  truncatedHash := hash[offset..offset+3]  //4 bytes starting at the offset
 *  set the first bit of truncatedHash to zero  //remove the most significant bit
 *  code := truncatedHash mod 1000000
 *  pad code with 0 until length of code is 6
 *
 *  return code
 * ```
 *
 * @class Authenticator
 * @extends {TOTP}
 * @since 3.0.0
 * @author Gerald Yeo
 * @license MIT
 *
 */

var Authenticator = (function (_TOTP) {
  _inherits(Authenticator, _TOTP);

  /**
   * Creates the instance
   */

  function Authenticator() {
    _classCallCheck(this, Authenticator);

    _get(Object.getPrototypeOf(Authenticator.prototype), 'constructor', this).call(this);

    /**
     * @type {string}
     */
    this.chart = 'https://chart.googleapis.com/chart?cht=qr&chs=150x150&choe=UTF-8&chld=M|0&chl=%uri';

    /**
     * @type {number}
     */
    this.step = 30;
  }

  /**
   * Option Setter
   *
   * @method options
   *
   * @param {Object} opt - custom options
   */

  _createClass(Authenticator, [{
    key: 'options',
    value: function options() {
      var opt = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      _get(Object.getPrototypeOf(Authenticator.prototype), 'options', this).call(this, opt);
      this.chart = opt.chart || this.chart;
    }

    /**
     * Generates an otpauth uri
     *
     * @method keyuri
     *
     * @param {string} user - the name/id of your user
     * @param {string} service - the name of your service
     * @param {string} secret - your secret that is used to generate the token
     * @return {string} otpauth uri. Example: otpauth://totp/user:localhost?secet=NKEIBAOUFA
     */
  }, {
    key: 'keyuri',
    value: function keyuri() {
      var user = arguments.length <= 0 || arguments[0] === undefined ? 'user' : arguments[0];
      var service = arguments.length <= 1 || arguments[1] === undefined ? 'service' : arguments[1];
      var secret = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

      var data = '%service:%user?secret=%secret&issuer=%service';
      var protocol = 'otpauth://totp/';

      data = data.replace('%user', user);
      data = data.replace('%secret', secret);
      data = data.replace(/%service/g, service);

      return encodeURIComponent(protocol + data);
    }

    /**
     * Generates a QR Code image
     *
     * By default, it uses Google Charts as it's charting tool
     *
     * @method qrcode
     *
     * @param {string} user - the name/id of your user
     * @param {string} service - yhe name of your service
     * @param {string} secret - your secret that is used to generate the token
     * @return {string} the QR code image url
     */
  }, {
    key: 'qrcode',
    value: function qrcode(user, service, secret) {
      var uri = this.keyuri(user, service, secret);
      var chart = this.chart;

      chart = chart.replace('%uri', uri);

      return chart;
    }

    /**
     * Encodes secret into base32
     *
     * @method encode
     *
     * @param {string} secret - your secret that is used to generate the token
     * @param {string} format - any format supported by node's `Buffer`
     * @return {string} Base32 string
     */
  }, {
    key: 'encode',
    value: function encode(secret) {
      var format = arguments.length <= 1 || arguments[1] === undefined ? 'binary' : arguments[1];

      return _thirtyTwo2['default'].encode(secret).toString(format);
    }

    /**
     * Decodes base32 value to secret.
     *
     * @method decode
     *
     * @param {string} eSecret - your secret that is used to generate the token
     * @param {string} format - any format supported by node's `Buffer`
     * @return {string} Decoded string
     */
  }, {
    key: 'decode',
    value: function decode(eSecret) {
      var format = arguments.length <= 1 || arguments[1] === undefined ? 'binary' : arguments[1];

      return _thirtyTwo2['default'].decode(eSecret).toString(format);
    }

    /**
     * Generates the OTP code
     *
     * @method generate
     *
     * @param {string} secret - your secret that is used to generate the token
     * @return {number} OTP Code
     */
  }, {
    key: 'generate',
    value: function generate(secret) {
      secret = this.decode(secret);

      var code = _get(Object.getPrototypeOf(Authenticator.prototype), 'generate', this).call(this, secret);
      return code;
    }

    /**
     * Generates a secret key
     *
     * @method generateSecret
     *
     * @param {number} len - length of secret (default: 16)
     * @return {string} secret key
     */
  }, {
    key: 'generateSecret',
    value: function generateSecret() {
      var len = arguments.length <= 0 || arguments[0] === undefined ? 16 : arguments[0];

      var secret = '';

      while (secret.length < len) {
        secret += _OTPUtils2['default'].generateSecret(40, 'base64');
      }

      return this.encode(secret).slice(0, len);
    }
  }]);

  return Authenticator;
})(_TOTP3['default']);

exports['default'] = Authenticator;
module.exports = exports['default'];