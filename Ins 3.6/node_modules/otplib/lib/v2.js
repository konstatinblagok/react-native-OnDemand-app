'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _classesHOTP = require('./classes/HOTP');

var _classesHOTP2 = _interopRequireDefault(_classesHOTP);

var _classesTOTP = require('./classes/TOTP');

var _classesTOTP2 = _interopRequireDefault(_classesTOTP);

var _classesAuthenticator = require('./classes/Authenticator');

var _classesAuthenticator2 = _interopRequireDefault(_classesAuthenticator);

var _classesOTPUtils = require('./classes/OTPUtils');

var _classesOTPUtils2 = _interopRequireDefault(_classesOTPUtils);

/**
 * v3 to v2 adapter
 *
 * This file provides method mappings between
 * version 3 and version 2 of the library.
 *
 * @since 3.0.0
 */

var hotp = new _classesHOTP2['default']();
var totp = new _classesTOTP2['default']();
var authenticator = new _classesAuthenticator2['default']();

/**
 * Helpers
 * --------------------------------------------------------
 */
function checkTOTP(token, secret) {
    if (this.test) {
        totp.options({
            epoch: arguments[2]
        });
    }

    var systemToken = totp.generate(secret);

    return _classesOTPUtils2['default'].isSameToken(token, systemToken);
}

function checkHOTP(token, secret) {
    var counter = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

    var systemToken = hotp.generate(secret, counter);
    return _classesOTPUtils2['default'].isSameToken(token, systemToken);
}

/**
 * Core
 * --------------------------------------------------------
 */
var Core = function Core() {

    this.test = false;

    this.digits = 6;
    this.step = 30;

    this.epoch = null;
    this.utils = _classesOTPUtils2['default'];
};

Core.prototype.hotp = hotp.generate;
Core.prototype.totp = totp.generate;
Core.prototype.checkTOTP = checkTOTP;
Core.prototype.checkHOTP = checkHOTP;

Core.prototype.helpers = {
    isSameToken: _classesOTPUtils2['default'].isSameToken,
    stringToHex: _classesOTPUtils2['default'].stringToHex,
    hexToInt: _classesOTPUtils2['default'].hexToInt,
    intToHex: _classesOTPUtils2['default'].intToHex,
    pad: _classesOTPUtils2['default'].pad
};

Core.prototype.secret = {
    generate: _classesOTPUtils2['default'].generateSecret,
    removeSpaces: _classesOTPUtils2['default'].removeSpaces,
    divideIntoSetsOf: _classesOTPUtils2['default'].setsOf
};

/**
 * Google Authenticator
 * --------------------------------------------------------
 */
var Goog = function Goog() {
    this.digits = 6;
    this.step = 30;
};
Goog.prototype.secret = authenticator.generateSecret;
Goog.prototype.keyuri = authenticator.keyuri;
Goog.prototype.qrcode = authenticator.qrcode;
Goog.prototype.generate = authenticator.generate;
Goog.prototype.check = checkTOTP;
Goog.prototype.encode = authenticator.encode;
Goog.prototype.decode = authenticator.decode;

/**
 * Export
 * --------------------------------------------------------
 */
exports['default'] = {
    core: new Core(),
    google: new Goog()
};
module.exports = exports['default'];