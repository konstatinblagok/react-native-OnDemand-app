{"version":3,"sources":["../src/ipfilter.js"],"names":[],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash'),\niputil = require('ip'),\nrangeCheck = require('range_check');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *\n *      app.use(ipfilter(ips));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `log` console log actions. Defaults to true.\n *  - `errorCode` the HTTP status code to use when denying access. Defaults to 401.\n *  - `errorMessage` the error message to use when denying access. Defaults to 'Unauthorized'.\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [Array] IP addresses\n * @param {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n    ips = ips || false;\n\n    var logger = function(message){ console.log(message);};\n    var settings = _.defaults( opts || {}, {\n        mode: 'deny',\n        log: true,\n        logF: logger,\n        errorCode: 401,\n        errorMessage: 'Unauthorized',\n        allowPrivateIPs: false,\n        excluding: []\n    });\n\n    var getClientIp = function(req) {\n        var ipAddress;\n\n        var forwardedIpsStr = req.headers['x-forwarded-for'];\n        //Allow getting cloudflare connecting client IP\n        var cloudFlareConnectingIp = req.headers['cf-connecting-ip'];\n\n        //Allow getting codio connecting client IP\n        var codioConnectingIp=req.headers['x-real-ip'];\n\n        if (forwardedIpsStr) {\n            var forwardedIps = forwardedIpsStr.split(',');\n            ipAddress = forwardedIps[0];\n        }\n\n        if (!ipAddress) {\n            ipAddress = req.connection.remoteAddress;\n        }\n        if(cloudFlareConnectingIp !== undefined){\n            ipAddress=cloudFlareConnectingIp;\n        }\n        if(codioConnectingIp !== undefined){\n            ipAddress=codioConnectingIp;\n        }\n\n        if(!ipAddress){\n            return '';\n        }\n\n        if(ipAddress.indexOf(':') !== -1 && ipAddress.indexOf('::') === -1){\n            ipAddress = ipAddress.split(':')[0];\n        }\n\n        return ipAddress;\n    };\n\n    var matchClientIp = function(ip){\n        var mode = settings.mode.toLowerCase();\n\n        var result = _.invoke(ips,testIp,ip,mode);\n\n        if(mode === 'allow'){\n            return _.some(result);\n        }else{\n            return _.every(result);\n        }\n    };\n\n    var testIp = function(ip,mode){\n        var constraint = this;\n\n        // Check if it is an array or a string\n        if(typeof constraint === 'string'){\n            if(rangeCheck.validRange(constraint)){\n                return testCidrBlock(ip,constraint,mode);\n            }else{\n                return testExplicitIp(ip,constraint,mode);\n            }\n        }\n\n        if(typeof constraint === 'object'){\n            return testRange(ip,constraint,mode);\n        }\n    };\n\n    var testExplicitIp = function(ip,constraint,mode){\n        if(ip === constraint){\n            return mode === 'allow';\n        }else{\n            return mode === 'deny';\n        }\n    };\n\n    var testCidrBlock = function(ip,constraint,mode){\n        if(rangeCheck.inRange(ip, constraint)){\n            return mode === 'allow';\n        }else{\n            return mode === 'deny';\n        }\n    };\n\n    var testRange = function(ip,constraint,mode){\n        var filteredSet = _.filter(ips,function(constraint){\n            if(constraint.length > 1){\n                var startIp = iputil.toLong(constraint[0]);\n                var endIp = iputil.toLong(constraint[1]);\n                var longIp = iputil.toLong(ip);\n                return  longIp >= startIp && longIp <= endIp;\n            }else{\n                return ip === constraint[0];\n            }\n        });\n\n        if(filteredSet.length > 0){\n            return mode === 'allow';\n        }else{\n            return mode === 'deny';\n        }\n    };\n\n    return function(req, res, next) {\n        if(settings.excluding.length > 0){\n            var results = _.filter(settings.excluding,function(exclude){\n                var regex = new RegExp(exclude);\n                return regex.test(req.url);\n            });\n\n            if(results.length > 0){\n                if(settings.log){\n                    logger('Access granted for excluded path: ' + results[0]);\n                }\n                return next();\n            }\n        }\n\n        var ip = getClientIp(req);\n        // If no IPs were specified, skip\n        // this middleware\n        if(!ips || !ips.length) { return next(); }\n\n        if(matchClientIp(ip,req)) {\n            // Grant access\n            if(settings.log) {\n                settings.logF('Access granted to IP address: ' + ip);\n            }\n\n            return next();\n        }\n\n        // Deny access\n        if(settings.log) {\n            settings.logF('Access denied to IP address: ' + ip);\n        }\n\n        res.statusCode = settings.errorCode;\n        return res.end(settings.errorMessage);\n    };\n};\n"]}